/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * ModusBox
 - Georgi Georgiev <georgi.georgiev@modusbox.com>
 --------------
 ******'/

@startuml
' declate title
title 6.2.1. Trigger Settlement Event (createSettlement)
autonumber

' declare actors
actor "Hub Employee" as OPERATOR
boundary "Settlement Service API" as SSAPI
entity "Settlement DAO" as SETTLE_DAO
database "Central Store" as DB

box "Central HUB" #lightpink
    participant OPERATOR
end box

box "Settlement Service" #lightgreen
    participant SSAPI
    participant SETTLE_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
group Trigger Settlement Event
activate OPERATOR
    note right of OPERATOR #yellow
        {
            "settlementModelName": "string",  
            "reason": "string",
            "settlementWindows": [
                {
                    "id": 1,
                },
                {
                    "id": 2,
                }
            ]
        }
    end note
    OPERATOR -> SSAPI: POST - /settlements
    activate SSAPI

    SSAPI-> SETTLE_DAO: Request settlementModel\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Retrieve settlementModel
    activate DB
    hnote over DB #lightyellow
        SELECT sg.name settlementGranularity, si.name settlementInterchange,
            sd.name settlementDelay, sm.ledgerAccountTypeId,
            sm.currencyId, sm.requireLiquidityCheck
        FROM **settlementModel** sm
        JOIN **settlementGranularity** sg
        ON sg.settlementGranularityId = sm.settlementGranularityId
        JOIN **settlementInterchange** si
        ON si.settlementInterchangeId = sm.settlementInterchangeId
        JOIN **settlementDelay** sd
        ON sd.settlementDelayId = sm.settlementDelayId
        WHERE name = {settlementModelName}
        AND isActive = 1
    end hnote
    SETTLE_DAO <-- DB: Return data
    deactivate DB
    SSAPI <-- SETTLE_DAO: Return **settlementModelData (smd)**
    deactivate SETTLE_DAO

    break smd.settlementGranularity != 'NET' ||\nsmd.settlementInterchange != 'MULTILATERAL' ||\nsmd.settlementDelay != 'DEFERRED'
        note right of SSAPI #lightgray
            Log ERROR event
        end note
        note left of SSAPI #yellow
            {
                errorInformation: {
                    "errorCode": <integer>,
                    "errorDescription": "Invalid settlement model"
                }
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - 4xx (Client error)
    end
    
    SSAPI-> SETTLE_DAO: Request settlementWindow(s)\n<color #FF0000><b>Error code:</b> 2001</color>
    activate SETTLE_DAO
    SETTLE_DAO -> DB: Retrieve settlementWindow(s)
    activate DB
    hnote over DB #lightyellow
        SELECT DISTINCT sw.settlementWindowId, sw.currentStateChangeId, sw.createdDate
        FROM **settlementWindow** sw
        JOIN **settlementWindowStateChange** swsc
        ON swsc.settlementWindowStateChangeId = sw.currentStateChangeId
        JOIN **settlementWindowContent** swc
        ON swc.settlementWindowId = sw.settlementWindowId
        JOIN **settlementWindowContentStateChange** swcsc
        ON swcsc.settlementWindowContentStateChangeId = sw.currentStateChangeId
        WHERE sw.settlementWindowId IN {payload.settlementWindows.idList}
        AND swc.ledgerAccountType = smd.ledgerAccountType
        AND swc.currencyId = ISNULL(smd.currencyId, swc.currencyId)
        AND swsc.settlementWindowStateId IN ('CLOSED', 'ABORTED', 'PENDING_SETTLEMENT')
        AND swcsc.settlementWindowStateId IN ('CLOSED', 'ABORTED')
    end hnote
    SETTLE_DAO <-- DB: Return data
    deactivate DB
    SSAPI <-- SETTLE_DAO: Return **windowsData**
    deactivate SETTLE_DAO

    break payload.settlementWindows.length != windowsData.length
        note right of SSAPI #lightgray
            Log ERROR event
        end note
        note left of SSAPI #yellow
            {
                errorInformation: {
                    "errorCode": <integer>,
                    "errorDescription": "Invalid window(s) found"
                }
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - 4xx (Client error)
    end

    note right of SSAPI #lightgray
        All preliminary validations succeeded
    end note

    group Main processing
        SSAPI ->SETTLE_DAO: Create settlement\n<color #FF0000><b>Error code:</b> 2001</color>
        activate SETTLE_DAO
        group <color #blue>DB TRANSACTION</color>
            note right of SETTLE_DAO #lightgray
                let **transactionTimestamp** = now()
            end note

            SETTLE_DAO -> DB: Insert new settlement
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **settlement** (reason, createdDate)
                VALUES ({payload.reason}, {transactionTimestamp})
            end hnote
            SETTLE_DAO <-- DB: Return **settlementId**
            deactivate DB

            SETTLE_DAO -> DB: Associate settlement windows with the settlement
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **settlementSettlementWindow** (settlementId, settlementWindowId, createdDate)
                VALUES ({settlementId}, {payload.settlementWindows.idList}, {transactionTimestamp})
            end hnote
            deactivate DB

            SETTLE_DAO -> DB: <color #red>Populate settlementParticipantCurrency with aggregated data</color>
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **settlementParticipantCurrency**
                       (settlementId, participantCurrencyId, createdDate, netAmount)
                SELECT ssw.settlementId, participantCurrencyId, {transactionTimestamp}, SUM(amount)
                FROM **settlementSettlementWindow** ssw
                JOIN **settlementWindow** sw
                ON sw.settlementWindowId = ssw.settlementWindowId
                JOIN **settlementWindowContent** swc
                ON swc.settlementWindowId = sw.settlementWindowId
                <color #red>JOIN **ledgerAccountType** lat</color>
                <color #red>ON lat.ledgerAccountTypeId = swc.ledgerAccountTypeId</color>
                <color #red>AND lat.isSettleable = 1</color>
                <color #red>JOIN **ledgerEntryType** let</color>
                <color #red>ON let.ledgerAccountTypeId = lat.ledgerAccountTypeId</color>
                JOIN **settlementContentAggregation** sca
                ON sca.settlementWindowContentId = swc.settlementWindowContentId
                <color #red>AND sca.ledgerEntryTypeId = let.ledgerEntryTypeId</color>
                WHERE ssw.settlementId = {settlementId}
                AND swc.ledgerAccountTypeId = {smd.ledgerAccountTypeId}
                AND swc.currencyId = ISNULL({smd.currencyId}, swc.currencyId)
                GROUP BY settlementId, participantCurrencyId
            end hnote
            SETTLE_DAO <-- DB: Return inserted **settlementParticipantCurrencyIdList**
            deactivate DB

            SETTLE_DAO -> DB: Insert initial settlement accounts state 'PENDING_SETTLEMENT'
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **settlementParticipantCurrencyStateChange**
                       (settlementParticipantCurrencyId, settlementStateId, reason, createdDate)
                VALUES ({settlementParticipantCurrencyIdList}, 'PENDING_SETTLEMENT',
                       {payload.reason}, {transactionTimestamp})
            end hnote
            SETTLE_DAO <-- DB: Return inserted **settlementParticipantCurrencyStateChangeIdList**
            deactivate DB
            SETTLE_DAO -> SETTLE_DAO: Merge settlementParticipantCurrencyStateChangeIdList\nto settlementParticipantCurrencyIdList in order to\nissue the following update in one knex command

            SETTLE_DAO -> DB: Update pointers to current state change ids
            activate DB
            hnote over DB #lightyellow
                UPDATE **settlementParticipantCurrency**
                SET currentStateChangeId = {settlementParticipantCurrencyStateChangeIdList}
                WHERE settlementParticipantCurrencyId = {settlementParticipantCurrencyIdList}
            end hnote
            deactivate DB

            group Populate settlement content aggregation state
                SETTLE_DAO -> DB: <color #red>Insert current content aggregation state change</color>
                activate DB
                hnote over DB #lightyellow
                    INSERT INTO **settlementContentAggregationStateChange**
                        (settlementContentAggregationId, settlementWindowStateId)
                    SELECT sca.settlementContentAggregationId, 'PENDING_SETTLEMENT'
                    FROM **settlementWindowContent** swc
                    JOIN **settlementContentAggregation** sca
                    <color #red>ON sca.settlementWindowContentId = swc.settlementWindowContentId</color>
                    <color #red>^â no need to filter by sca.ledgerEntryTypeId <b>?</b></color>
                    WHERE swc.settlementWindowId IN {payload.settlementWindows.idList}
                    <color #blue>AND swc.ledgerAccountTypeId = {smd.ledgerAccountTypeId}</color>
                    <color #blue>AND swc.currencyId = ISNULL({smd.currencyId}, swc.currencyId)</color>
                end hnote
                deactivate DB

                SETTLE_DAO -> DB: <color #red>Update pointers to current state change ids (<b>knex</b>)</color>
                activate DB
                hnote over DB #lightyellow
                    UPDATE **settlementContentAggregation**
                    FROM **settlementContentAggregation** sca
                    JOIN (
                        SELECT scacs.settlementContentStateAggregationId, 
                            MAX(scacs.settlementContentAggregationStateChangeId) AS currentStateChangeId
                        FROM **settlementContentAggregationStateChange** scacs
                        JOIN **settlementContentAggregation** sca2
                        ON sca2.settlementContentAggregationId = scacs.settlementContentAggregationId
                        JOIN **settlementWindowContent** swc2
                        ON swc2.settlementWindowContentId = sca2.settlementWindowContentId
                        WHERE swc2.settlementWindowId IN {payload.settlementWindows.idList}
                        <color #blue>AND swc2.ledgerAccountTypeId = {smd.ledgerAccountTypeId}</color>
                        <color #blue>AND swc2.currencyId = ISNULL({smd.currencyId}, swc2.currencyId)</color>
                        GROUP BY settlementContentStateAggregationId) scasc
                    ON scasc.settlementContentStateAggregationId = sca.settlementContentStateAggregationId
                    SET currentStateChangeId = scasc.currentStateChangeId
                    WHERE settlementWindowContentId IN (
                        SELECT settlementWindowContentId
                        FROM **settlementWindowContent**
                        WHERE settlementWindowId IN {payload.settlementWindows.idList}
                        <color #blue>AND ledgerAccountTypeId = {smd.ledgerAccountTypeId}</color>
                        <color #blue>AND currencyId = ISNULL({smd.currencyId}, currencyId)</color>)
                end hnote
                deactivate DB
            end

            loop <color #red>foreach w in windowsData</color>
                opt if w.currentStateChangeId IN ('CLOSED', 'ABORTED')
                    SETTLE_DAO -> DB: Insert new state for settlementWindow 'PENDING_SETTLEMENT'
                    activate DB
                    hnote over DB #lightyellow
                        INSERT INTO **settlementWindowStateChange**
                            (settlementWindowId, settlementWindowStateId, reason, createdDate)
                        VALUES ({w.settlementWindowId}, 'PENDING_SETTLEMENT',
                            {payload.reason}, {transactionTimestamp})
                    end hnote
                    SETTLE_DAO <-- DB: Return inserted **settlementWindowStateChangeId**
                    deactivate DB

                    SETTLE_DAO -> DB: Update pointers to current state change ids
                    activate DB
                    hnote over DB #lightyellow
                        UPDATE **settlementWindow**
                        SET currentStateChangeId = {settlementWindowStateChangeId}
                        WHERE settlementWindowId = {w.settlementWindowId}
                    end hnote
                    deactivate DB
                end
            end

            SETTLE_DAO -> DB: Insert initial state for settlement 'PENDING_SETTLEMENT'
            activate DB
            hnote over DB #lightyellow
                INSERT INTO **settlementStateChange**
                       (settlementId, settlementStateId, reason, createdDate)
                VALUES ({settlementId}, âPENDING_SETTLEMENTâ,
                       {payload.reason}, {transactionTimestamp})
            end hnote
            SETTLE_DAO <-- DB: Return **settlementStateChangeId**
            deactivate DB

            SETTLE_DAO -> DB: Update pointer to current state change id
            activate DB
            hnote over DB #lightyellow
                UPDATE **settlement**
                SET currentStateChangeId = {settlementStateChangeId}
                WHERE settlementId = {settlementId}
            end hnote
            deactivate DB
        end

        SETTLE_DAO -> DB: Select account data for response
        activate DB
        hnote over DB #lightyellow
            SELECT pc.participantId, spc.participantCurrencyId, spc.netAmount, pc.currencyId
            FROM **settlementParticipantCurrency** spc
            JOIN **participantCurrency** pc
            ON pc.participantCurrencyId = spc.participantCurrencyId
            WHERE spc.settlementId = {settlementId}
        end hnote
        SETTLE_DAO <-- DB: Return **accountData**
        deactivate DB

        SSAPI <-- SETTLE_DAO: Construct and return result
        deactivate SETTLE_DAO
        note left of SSAPI #yellow
            {
                "id": settlementId,
                "state": "PENDING_SETTLEMENT",
                "settlementWindows": [
                    {
                        "id": windowsData.settlementWindowIdList,
                        "state": "PENDING_SETTLEMENT",
                        "reason": payload.reason,
                        "createdDate": windowsData.createdDateList,
                        "changedDate": transactionTimestamp
                    }
                ],
                "participants": [
                    {
                        "id": accountData.participantId,
                        "accounts": [
                            {
                                "id": accountData.participantCurrencyId,
                                "state": "PENDING_SETTLEMENT",
                                "reason": payload.reason,
                                "netSettlementAmount": {
                                    "amount": accountData.netAmount,
                                    "currency": accountData.currencyId
                                }
                            }
                        ]
                    }
                ]
            }
        end note
        OPERATOR <-- SSAPI: Respond HTTP - 201 (Created)
    end
end
@enduml
